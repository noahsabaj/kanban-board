This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-27T14:29:48.077Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/components/kanban/BoardLayout.tsx
src/components/kanban/Header.tsx
src/components/kanban/KanbanColumn.tsx
src/components/kanban/types.ts
src/components/modals/BulkImportModal.tsx
src/components/modals/CreateTaskModal.tsx
src/components/modals/TaskModal.tsx
src/hooks/useLocalStorage.ts
src/lib/initialBoard.ts
src/lib/types.ts
src/utils/storage.ts
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "kanban-board",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "15.0.3",
    "react": "19.0.0-rc-66855b96-20241106",
    "react-dom": "19.0.0-rc-66855b96-20241106",
    "repopack": "^0.1.45"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

import { Inter } from 'next/font/google';

const inter = Inter({
  subsets: ['latin'],
  variable: '--font-inter',
});

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
  display: 'swap',
});

const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
  display: 'swap',
});

export const metadata: Metadata = {
  title: "Kanban Board",
  description: "Kanban Board for Noah Sabaj",
  icons: {
    icon: '/favicon.ico',
  },
  viewport: {
    width: 'device-width',
    initialScale: 1,
  },
  themeColor: [
    { media: '(prefers-color-scheme: light)', color: '#ffffff' },
    { media: '(prefers-color-scheme: dark)', color: '#0d1117' }
  ]
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${inter.variable} antialiased min-h-screen`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
'use client';

import { useState, useEffect } from 'react';
import { Task, BoardState } from '@/components/kanban/types';
import { useLocalStorage } from '@/hooks/useLocalStorage';
import { DEFAULT_PERSISTED_STATE, PersistedState } from '@/lib/types';
import { Header } from '@/components/kanban/Header';
import { BoardLayout } from '@/components/kanban/BoardLayout';
import { CreateTaskModal } from '@/components/modals/CreateTaskModal';
import { TaskModal } from '@/components/modals/TaskModal';
import { BulkImportModal } from '@/components/modals/BulkImportModal';

export default function Home() {
  const [persistedState, setPersistedState] = useLocalStorage<PersistedState>(
    'kanbanState',
    DEFAULT_PERSISTED_STATE
  );

  const [board, setBoard] = useState(persistedState.board);
  const [darkMode, setDarkMode] = useState(persistedState.darkMode);
  const [isCreating, setIsCreating] = useState(false);
  const [isBulkImporting, setIsBulkImporting] = useState(false);
  const [bulkTasks, setBulkTasks] = useState('');
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editingTask, setEditingTask] = useState<Task | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [totalPoints, setTotalPoints] = useState<{ [key: string]: number }>({});
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    setPersistedState({
      board,
      darkMode,
      lastUpdated: new Date().toISOString()
    });
  }, [board, darkMode]);

  useEffect(() => {
    calculateTotalPoints();
  }, [board]);

  const calculateTotalPoints = () => {
    const points = Object.entries(board).reduce((acc, [column, tasks]) => {
      acc[column] = tasks.reduce((sum, task) => sum + task.points, 0);
      return acc;
    }, {} as { [key: string]: number });
    setTotalPoints(points);
  };

  const handleCreateTask = (task: Task) => {
    const newBoard = {
      ...board,
      backlog: [...board.backlog, task]
    };
    setBoard(newBoard);
    setIsCreating(false);
  };

  const handleEditTask = (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingTask) return;
    
    const updatedTask = {
      ...editingTask,
      lastModified: new Date().toISOString()
    };
    
    setBoard(prev => {
      const newBoard = { ...prev };
      Object.keys(newBoard).forEach(key => {
        newBoard[key as keyof BoardState] = newBoard[key as keyof BoardState]
          .map(t => t.id === updatedTask.id ? updatedTask : t);
      });
      return newBoard;
    });
    
    setIsEditing(false);
    setEditingTask(null);
    setSelectedTask(updatedTask);
  };

  const handleDeleteTask = (taskId: number) => {
    setBoard(prev => {
      const newBoard = { ...prev };
      Object.keys(newBoard).forEach(key => {
        newBoard[key as keyof BoardState] = newBoard[key as keyof BoardState]
          .filter(t => t.id !== taskId);
      });
      return newBoard;
    });
    setShowDeleteConfirm(false);
    setSelectedTask(null);
  };

  const handleBulkImport = (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const tasks: Task[] = JSON.parse(bulkTasks);
      const timestamp = new Date().toISOString();
      const tasksWithIds = tasks.map(task => ({
        ...task,
        id: Date.now() + Math.random(),
        created: timestamp,
        lastModified: timestamp
      }));
      
      setBoard(prev => ({
        ...prev,
        backlog: [...prev.backlog, ...tasksWithIds]
      }));
      setIsBulkImporting(false);
      setBulkTasks('');
    } catch (error) {
      alert('Invalid JSON format. Please check your input.');
    }
  };

  const handleDragStart = (e: React.DragEvent, task: Task) => {
    e.dataTransfer.setData('task', JSON.stringify(task));
  };

  const handleDrop = (e: React.DragEvent, column: keyof BoardState) => {
    e.preventDefault();
    const task = JSON.parse(e.dataTransfer.getData('task')) as Task;
    const updatedTask = {
      ...task,
      lastModified: new Date().toISOString()
    };
    
    setBoard(prev => {
      const newBoard = { ...prev };
      Object.keys(newBoard).forEach(key => {
        newBoard[key as keyof BoardState] = newBoard[key as keyof BoardState]
          .filter(t => t.id !== task.id);
      });
      
      newBoard[column] = [...newBoard[column], updatedTask];
      return newBoard;
    });
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const startEditing = (task: Task) => {
    setEditingTask(task);
    setIsEditing(true);
  };

  return (
    <main className={`min-h-screen p-6 ${darkMode ? 'bg-[#0d1117] text-gray-100' : 'bg-gray-100 text-gray-900'}`}>
      <div className="max-w-[1800px] mx-auto">
        <Header 
          searchTerm={searchTerm}
          onSearchChange={setSearchTerm}
          darkMode={darkMode}
          onDarkModeToggle={() => setDarkMode(!darkMode)}
          onImport={() => setIsBulkImporting(true)}
          onCreateTask={() => setIsCreating(true)}
        />

        <BoardLayout 
          board={board}
          totalPoints={totalPoints}
          darkMode={darkMode}
          searchTerm={searchTerm}
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onDragStart={handleDragStart}
          onTaskClick={setSelectedTask}
        />

        <CreateTaskModal 
          isOpen={isCreating}
          onClose={() => setIsCreating(false)}
          onSubmit={handleCreateTask}
          darkMode={darkMode}
        />

        {selectedTask && (
          <TaskModal
            task={selectedTask}
            isEditing={isEditing}
            showDeleteConfirm={showDeleteConfirm}
            editingTask={editingTask || selectedTask}
            darkMode={darkMode}
            onClose={() => {
              setSelectedTask(null);
              setIsEditing(false);
              setEditingTask(null);
            }}
            onDelete={handleDeleteTask}
            onEdit={() => startEditing(selectedTask)}
            onEditSubmit={handleEditTask}
            onEditingTaskChange={setEditingTask}
            onShowDeleteConfirm={() => setShowDeleteConfirm(true)}
          />
        )}

        <BulkImportModal
          isOpen={isBulkImporting}
          onClose={() => setIsBulkImporting(false)}
          onSubmit={handleBulkImport}
          bulkTasks={bulkTasks}
          onBulkTasksChange={setBulkTasks}
        />
      </div>
    </main>
  );
}

================
File: src/components/kanban/BoardLayout.tsx
================
'use client';

import { BoardState, Task } from '@/components/kanban/types';
import { KanbanColumn } from './KanbanColumn';

interface BoardLayoutProps {
  board: BoardState;
  totalPoints: { [key: string]: number };
  darkMode: boolean;
  searchTerm: string;
  onDrop: (e: React.DragEvent, column: keyof BoardState) => void;
  onDragOver: (e: React.DragEvent) => void;
  onDragStart: (e: React.DragEvent, task: Task) => void;
  onTaskClick: (task: Task) => void;
}

export const BoardLayout = ({
  board,
  totalPoints,
  darkMode,
  searchTerm,
  onDrop,
  onDragOver,
  onDragStart,
  onTaskClick
}: BoardLayoutProps) => {
  return (
    <div className="grid grid-cols-5 gap-6">
      {Object.entries(board).map(([columnId, tasks]) => (
        <KanbanColumn
          key={columnId}
          columnId={columnId}
          tasks={tasks}
          totalPoints={totalPoints[columnId] || 0}
          darkMode={darkMode}
          onDrop={onDrop}
          onDragOver={onDragOver}
          onDragStart={onDragStart}
          onTaskClick={onTaskClick}
          searchTerm={searchTerm}
        />
      ))}
    </div>
  );
};

================
File: src/components/kanban/Header.tsx
================
'use client';

interface HeaderProps {
    searchTerm: string;
    onSearchChange: (value: string) => void;
    darkMode: boolean;
    onDarkModeToggle: () => void;
    onImport: () => void;
    onCreateTask: () => void;
  }
  
  export const Header = ({
    searchTerm,
    onSearchChange,
    darkMode,
    onDarkModeToggle,
    onImport,
    onCreateTask
  }: HeaderProps) => {
    return (
      <div className="flex justify-between items-center mb-8">
        <div className="flex items-center gap-4">
          <h1 className="text-2xl font-bold">Kanban Board</h1>
          <div className="flex items-center gap-2">
            <input
              type="text"
              placeholder="Search tasks..."
              value={searchTerm}
              onChange={(e) => onSearchChange(e.target.value)}
              className="px-3 py-1 rounded-lg bg-gray-700 border border-gray-600 text-white"
            />
            <button
              onClick={onDarkModeToggle}
              className="p-2 rounded-lg bg-gray-700 hover:bg-gray-600"
            >
              {darkMode ? '☀️' : '🌙'}
            </button>
          </div>
        </div>
        <div className="flex gap-4">
          <button
            onClick={onImport}
            className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-500 
                    transition-colors duration-200 shadow-lg hover:shadow-purple-500/20"
          >
            Import User Stories
          </button>
          <button
            onClick={onCreateTask}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-500 
                    transition-colors duration-200 shadow-lg hover:shadow-blue-500/20"
          >
            + Add Single Task
          </button>
        </div>
      </div>
    );
  };

================
File: src/components/kanban/KanbanColumn.tsx
================
'use client';

import { Task, BoardState } from '@/components/kanban/types';

interface KanbanColumnProps {
  columnId: string;
  tasks: Task[];
  totalPoints: number;
  darkMode: boolean;
  onDrop: (e: React.DragEvent, column: keyof BoardState) => void;
  onDragOver: (e: React.DragEvent) => void;
  onDragStart: (e: React.DragEvent, task: Task) => void;
  onTaskClick: (task: Task) => void;
  searchTerm: string;
}

const getFilteredTasks = (tasks: Task[], searchTerm: string) => {
  return tasks.filter(task => 
    task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    task.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
    task.description?.toLowerCase().includes(searchTerm.toLowerCase())
  );
};

export const KanbanColumn = ({
  columnId,
  tasks,
  totalPoints,
  darkMode,
  onDrop,
  onDragOver,
  onDragStart,
  onTaskClick,
  searchTerm
}: KanbanColumnProps) => {
  return (
    <div 
      className={`${darkMode ? 'bg-[#161b22]' : 'bg-white'} rounded-xl shadow-lg border border-gray-700`}
      onDrop={(e) => onDrop(e, columnId as keyof BoardState)}
      onDragOver={onDragOver}
    >
      <div className="p-4 border-b border-gray-700">
        <h2 className="font-bold text-lg">
          {columnId.toUpperCase()}
          <span className="ml-2 text-sm text-gray-400">
            {tasks.length} {tasks.length === 1 ? 'task' : 'tasks'}
          </span>
          <span className="ml-2 text-sm text-purple-400">
            {totalPoints} pts
          </span>
        </h2>
      </div>
      
      <div className="p-4 space-y-3 max-h-[calc(100vh-280px)] overflow-y-auto">
        {getFilteredTasks(tasks, searchTerm).map((task: Task) => (
          <div
            key={task.id}
            draggable
            onDragStart={(e) => onDragStart(e, task)}
            onClick={() => onTaskClick(task)}
            className={`${darkMode ? 'bg-[#21262d]' : 'bg-gray-50'} rounded-lg p-4 shadow-md cursor-move 
                    hover:shadow-lg transition-all duration-200 
                    border border-gray-700 hover:border-blue-500/50`}
          >
            <div className="flex justify-between items-start mb-2">
              <h3 className="font-medium">
                {task.title}
                <span className="ml-2 text-sm text-purple-400">{task.points}pts</span>
              </h3>
              <div className="flex gap-2 text-sm">
                <span className="opacity-90">{task.priority}</span>
                <span className="opacity-90">{task.type}</span>
              </div>
            </div>
            <div className="text-sm text-gray-400">{task.category}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

================
File: src/components/kanban/types.ts
================
export type Priority = '🔥' | '⭐' | '👍' | '📝';
export type TaskType = '🎮' | '🐛' | '🔧' | '📱';

export interface Task {
    id: number;
    title: string;
    priority: Priority;
    type: TaskType;
    category: string;
    description?: string;
    points: number;
    created: string;
    lastModified: string;
}

export interface BoardState {
    backlog: Task[];
    todo: Task[];
    inProgress: Task[];
    testing: Task[];
    done: Task[];
}

================
File: src/components/modals/BulkImportModal.tsx
================
'use client';

import { Task } from '@/components/kanban/types';

interface BulkImportModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (e: React.FormEvent) => void;
  bulkTasks: string;
  onBulkTasksChange: (value: string) => void;
}

export const BulkImportModal = ({
  isOpen,
  onClose,
  onSubmit,
  bulkTasks,
  onBulkTasksChange
}: BulkImportModalProps) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <form onSubmit={onSubmit} 
            className="space-y-4 max-w-2xl w-full bg-[#161b22] p-6 rounded-xl shadow-xl 
                    border border-gray-700">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Import User Stories</h2>
          <button 
            type="button"
            onClick={onClose}
            className="text-gray-400 hover:text-gray-300"
          >
            ✕
          </button>
        </div>
        <textarea
          value={bulkTasks}
          onChange={e => onBulkTasksChange(e.target.value)}
          placeholder={`Paste your user stories JSON array here, e.g.:
            [
            {
                "title": "Story title",
                "priority": "🔥",
                "type": "🎮",
                "category": "MVP Core",
                "description": "Story description",
                "points": 5
            }
            ]`}
          rows={10}
          className="w-full p-4 rounded-lg bg-[#0d1117] border border-gray-600 
                  text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500
                  font-mono text-sm"
          required
        />
        <div className="flex gap-3">
          <button
            type="submit"
            className="flex-1 bg-purple-600 text-white px-4 py-2 rounded-lg 
                    hover:bg-purple-500 transition-colors duration-200"
          >
            Import Stories
          </button>
          <button
            type="button"
            onClick={onClose}
            className="flex-1 bg-gray-700 text-white px-4 py-2 rounded-lg 
                    hover:bg-gray-600 transition-colors duration-200"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};

================
File: src/components/modals/CreateTaskModal.tsx
================
'use client';

import { Task, Priority, TaskType } from '@/components/kanban/types';
import { useState } from 'react';

interface CreateTaskModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (task: Task) => void;
  darkMode: boolean;
}

export const CreateTaskModal = ({ isOpen, onClose, onSubmit, darkMode }: CreateTaskModalProps) => {
  const [newTask, setNewTask] = useState({
    title: '',
    priority: '👍' as Priority,
    type: '🎮' as TaskType,
    category: 'MVP Core',
    description: '',
    points: 0
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit({
      ...newTask,
      id: Date.now(),
      created: new Date().toISOString(),
      lastModified: new Date().toISOString()
    });
    setNewTask({
      title: '',
      priority: '👍',
      type: '🎮',
      category: 'MVP Core',
      description: '',
      points: 0
    });
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <form onSubmit={handleSubmit} 
            className="space-y-4 max-w-md w-full bg-[#161b22] p-6 rounded-xl shadow-xl 
                    border border-gray-700">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Create New Task</h2>
          <button 
            type="button"
            onClick={onClose}
            className="text-gray-400 hover:text-gray-300"
          >
            ✕
          </button>
        </div>
        <input
          type="text"
          value={newTask.title}
          onChange={e => setNewTask(prev => ({ ...prev, title: e.target.value }))}
          placeholder="Task title"
          className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 
                  text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500"
          required
        />
        <select
          value={newTask.priority}
          onChange={e => setNewTask(prev => ({ ...prev, priority: e.target.value as Priority }))}
          className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 
                  text-white focus:ring-2 focus:ring-blue-500"
        >
          <option value="🔥">🔥 High</option>
          <option value="⭐">⭐ Medium</option>
          <option value="👍">👍 Normal</option>
          <option value="📝">📝 Low</option>
        </select>
        <select
          value={newTask.type}
          onChange={e => setNewTask(prev => ({ ...prev, type: e.target.value as TaskType }))}
          className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 
                  text-white focus:ring-2 focus:ring-blue-500"
        >
          <option value="🎮">🎮 Feature</option>
          <option value="🐛">🐛 Bug</option>
          <option value="🔧">🔧 Technical</option>
          <option value="📱">📱 Platform</option>
        </select>
        <input
          type="text"
          value={newTask.category}
          onChange={e => setNewTask(prev => ({ ...prev, category: e.target.value }))}
          placeholder="Category"
          className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 
                  text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500"
        />
        <input
          type="number"
          value={newTask.points}
          onChange={e => setNewTask(prev => ({ ...prev, points: parseInt(e.target.value) || 0 }))}
          placeholder="Story Points"
          className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 
                  text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500"
          min="0"
          required
        />
        <textarea
          value={newTask.description}
          onChange={e => setNewTask(prev => ({ ...prev, description: e.target.value }))}
          placeholder="Description"
          rows={3}
          className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 
                  text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500"
        />
        <div className="flex gap-3">
          <button
            type="submit"
            className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg 
                    hover:bg-blue-500 transition-colors duration-200"
          >
            Save Task
          </button>
          <button
            type="button"
            onClick={onClose}
            className="flex-1 bg-gray-700 text-white px-4 py-2 rounded-lg 
                    hover:bg-gray-600 transition-colors duration-200"
          >
            Cancel
          </button>
        </div>
      </form>
    </div>
  );
};

================
File: src/components/modals/TaskModal.tsx
================
'use client';

import { Task, Priority, TaskType } from '@/components/kanban/types';
import { useState } from 'react';

interface TaskModalProps {
  task: Task;
  isEditing: boolean;
  showDeleteConfirm: boolean;
  editingTask: Task | null;
  darkMode: boolean;
  onClose: () => void;
  onDelete: (id: number) => void;
  onEdit: () => void;
  onEditSubmit: (e: React.FormEvent) => void;
  onEditingTaskChange: (task: Task) => void;
  onShowDeleteConfirm: () => void;
}

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleString();
};

export const TaskModal = ({
  task,
  isEditing,
  showDeleteConfirm,
  editingTask,
  darkMode,
  onClose,
  onDelete,
  onEdit,
  onEditSubmit,
  onEditingTaskChange,
  onShowDeleteConfirm
}: TaskModalProps) => {
  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className={`${darkMode ? 'bg-[#161b22]' : 'bg-white'} p-6 rounded-xl max-w-lg w-full shadow-xl border border-gray-700`}>
        {!isEditing && !showDeleteConfirm ? (
          <>
            <div className="flex justify-between items-start mb-4">
              <div>
                <h2 className="text-xl font-bold">{task.title}</h2>
                <span className="text-purple-400">{task.points} points</span>
                <div className="text-sm text-gray-400 mt-1">
                  Created: {formatDate(task.created)}
                  <br />
                  Last Modified: {formatDate(task.lastModified)}
                </div>
              </div>
              <div className="flex gap-2">
                <button onClick={onShowDeleteConfirm} className="text-red-400 hover:text-red-300 p-2">🗑️</button>
                <button onClick={onEdit} className="text-blue-400 hover:text-blue-300 p-2">✏️</button>
                <button onClick={onClose} className="text-gray-400 hover:text-gray-300 p-2">✕</button>
              </div>
            </div>
            <div className="flex gap-2 mb-4">
              <span className="px-2 py-1 bg-[#21262d] rounded text-sm">{task.priority}</span>
              <span className="px-2 py-1 bg-[#21262d] rounded text-sm">{task.type}</span>
              <span className="px-2 py-1 bg-[#21262d] rounded text-sm">{task.category}</span>
            </div>
            <p className="text-gray-300 whitespace-pre-wrap">{task.description || 'No description provided.'}</p>
          </>
        ) : showDeleteConfirm ? (
          <div className="text-center">
            <h2 className="text-xl font-bold mb-4">Delete Task</h2>
            <p className="mb-6">Are you sure you want to delete this task?</p>
            <div className="flex justify-center gap-4">
              <button
                onClick={() => onDelete(task.id)}
                className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
              >
                Delete
              </button>
              <button
                onClick={() => onShowDeleteConfirm()}
                className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
              >
                Cancel
              </button>
            </div>
          </div>
        ) : (
          <form onSubmit={onEditSubmit} className="space-y-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold">Edit Task</h2>
              <button 
                type="button"
                onClick={onClose}
                className="text-gray-400 hover:text-gray-300"
              >
                ✕
              </button>
            </div>
            <input
              type="text"
              value={editingTask?.title}
              onChange={e => onEditingTaskChange({ ...task, title: e.target.value })}
              className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 text-white"
              required
            />
            <select
              value={editingTask?.priority}
              onChange={e => onEditingTaskChange({ ...task, priority: e.target.value as Priority })}
              className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 text-white"
            >
              <option value="🔥">🔥 High</option>
              <option value="⭐">⭐ Medium</option>
              <option value="👍">👍 Normal</option>
              <option value="📝">📝 Low</option>
            </select>
            <select
              value={editingTask?.type}
              onChange={e => onEditingTaskChange({ ...task, type: e.target.value as TaskType })}
              className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 text-white"
            >
              <option value="🎮">🎮 Feature</option>
              <option value="🐛">🐛 Bug</option>
              <option value="🔧">🔧 Technical</option>
              <option value="📱">📱 Platform</option>
            </select>
            <input
              type="text"
              value={editingTask?.category}
              onChange={e => onEditingTaskChange({ ...task, category: e.target.value })}
              placeholder="Category"
              className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 text-white"
            />
            <input
              type="number"
              value={editingTask?.points}
              onChange={e => onEditingTaskChange({ ...task, points: parseInt(e.target.value) || 0 })}
              placeholder="Story Points"
              className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 text-white"
              min="0"
              required
            />
            <textarea
              value={editingTask?.description}
              onChange={e => onEditingTaskChange({ ...task, description: e.target.value })}
              placeholder="Description"
              rows={3}
              className="w-full p-2 rounded-lg bg-[#0d1117] border border-gray-600 text-white"
            />
            <div className="flex gap-3">
              <button
                type="submit"
                className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-500"
              >
                Save Changes
              </button>
              <button
                type="button"
                onClick={onClose}
                className="flex-1 bg-gray-700 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
              >
                Cancel
              </button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
};

================
File: src/hooks/useLocalStorage.ts
================
'use client';

import { useState, useEffect } from 'react';

export function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {
  const [storedValue, setStoredValue] = useState<T>(initialValue);

  useEffect(() => {
    try {
      const item = window.localStorage.getItem(key);
      if (item) {
        setStoredValue(JSON.parse(item));
      }
    } catch (error) {
      console.warn(`Error reading localStorage key "${key}":`, error);
    }
  }, [key]);

  const setValue = (value: T | ((val: T) => T)) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      
      setStoredValue(valueToStore);
      
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.warn(`Error setting localStorage key "${key}":`, error);
    }
  };

  return [storedValue, setValue];
}

================
File: src/lib/initialBoard.ts
================
import { BoardState } from "@/components/kanban/types";

export const emptyBoard: BoardState = {
  backlog: [],
  todo: [],
  inProgress: [],
  testing: [],
  done: []
};

================
File: src/lib/types.ts
================
import { BoardState } from '@/components/kanban/types';

export interface PersistedState {
  board: BoardState;
  darkMode: boolean;
  lastUpdated: string;
}

export const DEFAULT_PERSISTED_STATE: PersistedState = {
  board: {
    backlog: [],
    todo: [],
    inProgress: [],
    testing: [],
    done: []
  },
  darkMode: true,
  lastUpdated: new Date().toISOString()
};

================
File: src/utils/storage.ts
================
export const clearBoardData = () => {
  if (typeof window !== 'undefined') {
    window.localStorage.removeItem('kanbanState');
    window.location.reload();
  }
};

export const exportBoardData = () => {
  if (typeof window !== 'undefined') {
    const data = window.localStorage.getItem('kanbanState');
    if (data) {
      const blob = new Blob([data], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `kanban-backup-${new Date().toISOString()}.json`;
      a.click();
      URL.revokeObjectURL(url);
    }
  }
};

export const importBoardData = (jsonString: string) => {
  try {
    const data = JSON.parse(jsonString);
    window.localStorage.setItem('kanbanState', JSON.stringify(data));
    window.location.reload();
  } catch (error) {
    console.error('Error importing board data:', error);
    alert('Invalid backup file format');
  }
};

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
